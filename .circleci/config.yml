version: 2.1
references:
  pre_checkout: &pre_checkout
    run:
        name: Pre Checkout
        command: |
          echo $CIRCLE_CACHE_NONCE | \
            awk '{print "cache_nonce "$1}' > /opt/ros/$ROS_DISTRO/checksum.txt
          stat -c '%y' /opt/ros/$ROS_DISTRO/setup.sh | \
            sha256sum | \
            awk '{print "distro "$1}' >> /opt/ros/$ROS_DISTRO/checksum.txt
          rm -rf $OVERLAY_WS/*
  post_checkout: &post_checkout
    run:
        name: Post Checkout
        command: |
          rm $OVERLAY_WS/src/navigation2/nav2_system_tests/COLCON_IGNORE
          if ! cmp \
            $OVERLAY_WS/src/navigation2/tools/ros2_dependencies.repos \
            $UNDERLAY_WS/ros2_dependencies.repos >/dev/null 2>&1
          then
            echo "Cleaning Underlay"
            rm -rf $UNDERLAY_WS/*
            mkdir -p $UNDERLAY_WS/src
            vcs import $UNDERLAY_WS/src \
              < $OVERLAY_WS/src/navigation2/tools/ros2_dependencies.repos
          fi
  install_underlay_dependencies: &install_underlay_dependencies
    run:
        name: Install Underlay Dependencies
        command: |
          cat /opt/ros/$ROS_DISTRO/checksum.txt > $UNDERLAY_WS/checksum.txt
          find $UNDERLAY_WS/src -not -iwholename '*.git/*' -type f -exec sha256sum {} \; | \
            sort -k 2 | \
            cut -d" " -f1 | \
            sha256sum | \
            awk '{print "underlay source "$1}' >> $UNDERLAY_WS/checksum.txt
          apt-get update
          dependencies=$(
            rosdep install -q -y \
              --from-paths \
                $UNDERLAY_WS/src \
              --ignore-src \
              --verbose | \
            awk '$1 ~ /^resolution\:/' | \
            awk -F'[][]' '{print $2}' | \
            tr -d \, | xargs -n1 | sort -u | xargs)
          dpkg -s $dependencies | \
            sha256sum | \
            awk '{print "underlay dependencies "$1}' >> $UNDERLAY_WS/checksum.txt
  restore_ccache: &restore_ccache
    restore_cache:
      name: Restore CCache
      key: "ccache-v1\
        -{{ arch }}\
        -{{ .Branch }}\
        -{{ .Environment.CIRCLE_PR_NUMBER }}\
        -{{ checksum \"/opt/underlay_ws/checksum.txt\" }}"
  restore_underlay_cache: &restore_underlay_cache
    restore_cache:
      name: Restore Underlay Cache
      key: "underlay-v1\
        -{{ arch }}\
        -{{ .Branch }}\
        -{{ .Environment.CIRCLE_PR_NUMBER }}\
        -{{ checksum  \"/opt/underlay_ws/checksum.txt\" }}"
  build_underlay: &build_underlay
    run:
      name: Build Underlay
      command: |
        cd $UNDERLAY_WS
        if [ -d install ] && [ ! -f build_failed ]
        then
            echo "Skipping Underlay Build"
        else
            rm -rf build install log
            . /opt/ros/$ROS_DISTRO/setup.sh
            colcon build \
              --symlink-install \
              --cmake-args \
                -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
                -DCMAKE_C_COMPILER_LAUNCHER=ccache \
                -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
            rm -f build_failed
        fi
  save_underlay_cache: &save_underlay_cache
    save_cache:
      name: Save Underlay Cache
      key: "underlay-v1\
        -{{ arch }}\
        -{{ .Branch }}\
        -{{ .Environment.CIRCLE_PR_NUMBER }}\
        -{{ checksum  \"/opt/underlay_ws/checksum.txt\" }}\
        -{{ epoch }}"
      paths:
        - /opt/underlay_ws
  install_overlay_dependencies: &install_overlay_dependencies
    run:
        name: Install Overlay Dependencies
        command: |
          cat $UNDERLAY_WS/checksum.txt > $OVERLAY_WS/checksum.txt
          find $OVERLAY_WS/src -not -iwholename '*.git/*' -type f -exec sha256sum {} \; | \
            sort -k 2 | \
            cut -d" " -f1 | \
            sha256sum | \
            awk '{print "overlay source "$1}' >> $OVERLAY_WS/checksum.txt
          apt-get update
          dependencies=$(
            rosdep install -q -y \
              --from-paths \
                $UNDERLAY_WS/src \
                src \
              --ignore-src \
              --verbose | \
            awk '$1 ~ /^resolution\:/' | \
            awk -F'[][]' '{print $2}' | \
            tr -d \, | xargs -n1 | sort -u | xargs)
          dpkg -s $dependencies | \
            sha256sum | \
            awk '{print "overlay dependencies "$1}' >> $OVERLAY_WS/checksum.txt
  store_overlay_checksum: &store_overlay_checksum
    store_artifacts:
        path: checksum.txt
  restore_overlay_cache: &restore_overlay_cache
    restore_cache:
      name: Restore Overlay Cache
      key: "overlay-v1\
        -{{ arch }}\
        -{{ .Branch }}\
        -{{ .Environment.CIRCLE_PR_NUMBER }}\
        -{{ checksum \"/opt/overlay_ws/checksum.txt\" }}"
  build_overlay: &build_overlay
    run:
      name: Build Overlay
      command: |
        if [ -d install ] && [ ! -f build_failed ]
        then
            echo "Skipping Overlay Build"
        else
            rm -rf build install log
            . $UNDERLAY_WS/install/setup.sh
            colcon build \
              --symlink-install \
              --cmake-args \
                -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
                -DCMAKE_C_COMPILER_LAUNCHER=ccache \
                -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
                -DCOVERAGE_ENABLED=$COVERAGE_ENABLED
            rm -f build_failed
        fi
  save_ccache: &save_ccache
    save_cache:
      name: Save CCache
      key: "ccache-v1\
        -{{ arch }}\
        -{{ .Branch }}\
        -{{ .Environment.CIRCLE_PR_NUMBER }}\
        -{{ checksum \"/opt/underlay_ws/checksum.txt\" }}\
        -{{ epoch }}"
      paths:
        - /root/.ccache
      when: always
  save_overlay_cache: &save_overlay_cache
    save_cache:
      name: Save Overlay Cache
      key: "overlay-v1\
        -{{ arch }}\
        -{{ .Branch }}\
        -{{ .Environment.CIRCLE_PR_NUMBER }}\
        -{{ checksum \"/opt/overlay_ws/checksum.txt\" }}\
        -{{ epoch }}"
      paths:
        - /opt/overlay_ws
  copy_build_logs: &copy_build_logs
    run:
        name: Copy Build Logs
        when: always
        command: cp -rH log/latest_build log/build
  store_build_logs: &store_build_logs
    store_artifacts:
        path: log/build
  test_overlay: &test_overlay
    run:
        name: Test Overlay
        command: |
          . install/setup.sh
          src/navigation2/tools/run_test_suite.bash
  copy_test_logs: &copy_test_logs
    run:
        name: Copy Test Logs
        when: always
        command: cp -rH log/latest_test log/test
  store_test_logs: &store_test_logs
    store_artifacts:
        path: log/test
  report_code_coverage: &report_code_coverage
    run:
        name: Report Code Coverage
        command: |
          if [ "$COVERAGE_ENABLED" = "True" ]
          then
            . install/setup.sh
            src/navigation2/tools/code_coverage_report.bash codecovio
          else
            echo "Skipping Code Coverage Report"
          fi

commands:
  checkout_source:
    description: "Checkout Source"
    steps:
      - *pre_checkout
      - checkout:
          path: src/navigation2
      - *post_checkout
  setup_dependencies:
    description: "Setup Dependencies"
    steps:
      - *install_underlay_dependencies
      - *restore_ccache
      - *restore_underlay_cache
      - *build_underlay
      - *save_underlay_cache
      - *install_overlay_dependencies
  build_source:
    description: "Build Source"
    steps:
      - *store_overlay_checksum
      - *restore_overlay_cache
      - *build_overlay
      - *save_ccache
      - *save_overlay_cache
      - *copy_build_logs
      - *store_build_logs
  restore_build:
    description: "Restore Build"
    steps:
      - *pre_checkout
      - checkout:
          path: src/navigation2
      - *post_checkout
      - *install_underlay_dependencies
      - *restore_underlay_cache
      - *install_overlay_dependencies
      - *store_overlay_checksum
      - *restore_overlay_cache
  test_build:
    description: "Test Build"
    steps:
      - *test_overlay
      - *copy_test_logs
      - *store_test_logs
  report_coverage:
    description: "Report Coverage"
    steps:
      - *report_code_coverage

executors:
  debug_exec:
    docker:
      - image: ruffsl/navigation2:master
    working_directory: /opt/overlay_ws
    environment:
      CCACHE_MAXSIZE: "200M"
      CIRCLE_CACHE_NONCE: "Debug"
      CMAKE_BUILD_TYPE: "Debug"
      COVERAGE_ENABLED: "True"
      MAKEFLAGS: "-j 1 -l 2"
  release_exec:
    docker:
      - image: ruffsl/navigation2:master-rmw
    working_directory: /opt/overlay_ws
    environment:
      CCACHE_MAXSIZE: "200M"
      CIRCLE_CACHE_NONCE: "Release"
      CMAKE_BUILD_TYPE: "Release"
      COVERAGE_ENABLED: "False"
      MAKEFLAGS: "-j 1 -l 2"

jobs:
  debug_build:
    executor: debug_exec
    steps:
      - checkout_source
      - setup_dependencies
      - build_source
      - test_build
      - report_coverage
  release_build:
    executor: release_exec
    steps:
      - checkout_source
      - setup_dependencies
      - build_source
  test_rmw_connext_cpp:
    executor: release_exec
    environment:
      RMW_IMPLEMENTATION: "rmw_connext_cpp"
    steps:
      - restore_build
      - test_build
  test_rmw_fastrtps_cpp:
    executor: release_exec
    environment:
      RMW_IMPLEMENTATION: "rmw_fastrtps_cpp"
    steps:
      - restore_build
      - test_build
  test_rmw_opensplice_cpp:
    executor: release_exec
    environment:
      RMW_IMPLEMENTATION: "rmw_opensplice_cpp"
    steps:
      - restore_build
      - test_build

workflows:
  version: 2
  build-test:
    jobs:
      - debug_build
      - release_build
      - test_rmw_connext_cpp:
          requires:
            - release_build
      - test_rmw_fastrtps_cpp:
          requires:
            - release_build
      - test_rmw_opensplice_cpp:
          requires:
            - release_build
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - release_build
      - test_rmw_connext_cpp:
          requires:
            - release_build
      - test_rmw_fastrtps_cpp:
          requires:
            - release_build
      - test_rmw_opensplice_cpp:
          requires:
            - release_build
